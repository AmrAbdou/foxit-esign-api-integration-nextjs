/**
 * Foxit eSign testLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, FileWrapper, RequestOptions } from '../core';
import { Base64Envelope, base64EnvelopeSchema } from '../models/base64Envelope';
import { DraftEnvelope, draftEnvelopeSchema } from '../models/draftEnvelope';
import {
  EnvelopeFieldsUpdate,
  envelopeFieldsUpdateSchema,
} from '../models/envelopeFieldsUpdate';
import {
  EnvelopeIdentifier,
  envelopeIdentifierSchema,
} from '../models/envelopeIdentifier';
import {
  EnvelopeIdentifiers,
  envelopeIdentifiersSchema,
} from '../models/envelopeIdentifiers';
import {
  EnvelopeStatusEnum,
  envelopeStatusEnumSchema,
} from '../models/envelopeStatusEnum';
import {
  FolderCancellation,
  folderCancellationSchema,
} from '../models/folderCancellation';
import {
  ModifySharedEnvelope,
  modifySharedEnvelopeSchema,
} from '../models/modifySharedEnvelope';
import { PartyUpdate, partyUpdateSchema } from '../models/partyUpdate';
import {
  SessionGeneration,
  sessionGenerationSchema,
} from '../models/sessionGeneration';
import { URLEnvelope, uRLEnvelopeSchema } from '../models/uRLEnvelope';
import { array, number, optional, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class EnvelopesAPIController extends BaseController {
  /**
   * Envelopes can be created and send with publicly accessible PDF files.
   * Pass the array of URLs of PDFs in the body for documents to send.
   *
   * @param body
   * @return Response from the API call
   */
  async createEnvelopeFromURL(
    body: URLEnvelope,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/createfolder');
    const mapped = req.prepareArgs({ body: [body, uRLEnvelopeSchema] });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * *Note*: this endpoint will only send an envelope if it is currently in DRAFT mode. To create an
   * envelope in DRAFT mode, please pass *sendNow* as `true` for any envelope creation endpoint (such as
   * <a class="sc-hlTwrV fGbQJc" href="#/http/api-endpoints/envelopes-api/create-envelope-from-
   * url">Create Envelope from URL</a> )
   *
   * @param body
   * @return Response from the API call
   */
  async sendDraftEnvelope(
    body: DraftEnvelope,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/sendDraftFolder');
    const mapped = req.prepareArgs({ body: [body, draftEnvelopeSchema] });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * You can update envelope and the custom fields `(custom_field1 and custom_field2)` anytime before
   * execution using the 'Update Envelope Fields' API.
   *
   * *Note*: Envelope fields for a party can only be updated if the document has not been signed by that
   * party yet.
   *
   * @param body
   * @return Response from the API call
   */
  async updateEnvelopeFields(
    body: EnvelopeFieldsUpdate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/updateEnvelopeFields');
    const mapped = req.prepareArgs({
      body: [body, envelopeFieldsUpdateSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * You can poll our API to get the Envelope/Document data
   *
   * @param folderId
   * @return Response from the API call
   */
  async getEnvelopeDetails(
    folderId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/folders/myfolder');
    const mapped = req.prepareArgs({ folderId: [folderId, string()] });
    req.query('folderId', mapped.folderId);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * You can poll our API to get the Id(s) of multiple envelopes by providing a date range and
   * (optionally) a status as filters.
   *
   * @param dateFrom Start of the Envelope Creation Date range. Accepted format: YYYY-MM-DD
   * @param dateTo   Start of the Envelope Creation Date range. Accepted format: YYYY-MM-DD.
   *                                       <br/> <br/>Note: dateTo value should be under the 6 months from dateFrom
   *                                       value.
   * @param status   Get FolderIds by the folder status. Status parameter can have any of the
   *                                       following values: EXECUTED,SHARED,DRAFT, PARTIALLY SIGNED, CANCELLED,
   *                                       EXPIRED and DELETED. <br/>  <br/> Note: If you don't pass this parameter,
   *                                       then by default you will receive envelopes with any status.
   * @return Response from the API call
   */
  async getEnvelopeIds(
    dateFrom: string,
    dateTo: string,
    status?: EnvelopeStatusEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/folders/getAllFolderIdsByStatus');
    const mapped = req.prepareArgs({
      dateFrom: [dateFrom, string()],
      dateTo: [dateTo, string()],
      status: [status, optional(envelopeStatusEnumSchema)],
    });
    req.query('dateFrom', mapped.dateFrom);
    req.query('dateTo', mapped.dateTo);
    req.query('status', mapped.status);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * With Foxit eSign API, you can cancel/decline to sign an Envelope by calling /folders/cancelFolder
   * with the given parameters.
   *
   * @param body
   * @return Response from the API call
   */
  async cancelEnvelope(
    body: FolderCancellation,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/cancelFolder');
    const mapped = req.prepareArgs({ body: [body, folderCancellationSchema] });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * You can download executed folder document(s) as well as signature certificate all at once in a zip
   * file.
   *
   * Returns ZIP file binary stream of all the documents in the folder with the signature certificate.
   *
   * @param folderId The ID of the Envelope for which you would like to obtain the binary zip file for.
   * @return Response from the API call
   */
  async downloadEnvelopeFiles(
    folderId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {
    const req = this.createRequest('GET', '/folders/download');
    const mapped = req.prepareArgs({ folderId: [folderId, string()] });
    req.query('folderId', mapped.folderId);
    return req.callAsStream(requestOptions);
  }

  /**
   * The *data* paratemers accepts the same parameters as the <a class="sc-hlTwrV fGbQJc"
   * href="#/http/api-endpoints/envelopes-api/create-envelope-from-url">Create Envelope from URL</a>
   * endpoint does, with the exception of excluding the following parameters:
   *
   * - folderNames
   * - fileUrls
   *
   * @param file
   * @param data
   * @return Response from the API call
   */
  async createEnvelopeFromBinary(
    file: FileWrapper,
    data: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/createfolder');
    const mapped = req.prepareArgs({ data: [data, string()] });
    req.formData({
      file: file,
      data: mapped.data,
    });
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Envelopes can be created and send with publicly accessible PDF files.
   * Pass the array of BASE64 to PDF for documents to send.
   *
   * @param body
   * @return Response from the API call
   */
  async createEnvelopeFromBase64(
    body: Base64Envelope,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/createfolder');
    const mapped = req.prepareArgs({ body: [body, base64EnvelopeSchema] });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Modify any shared envelope and send again to recipients for signing.
   *
   * @param body
   * @return Response from the API call
   */
  async modifySharedEnvelope(
    body: ModifySharedEnvelope,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/modifySharedFolder');
    const mapped = req.prepareArgs({
      body: [body, modifySharedEnvelopeSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async sendSignatureReminder(
    body: EnvelopeIdentifier,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/signaturereminder');
    const mapped = req.prepareArgs({ body: [body, envelopeIdentifierSchema] });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * You can download individual document as a pdf file.
   *
   * Returns PDF file binary stream of the document which you can save as PDF file.
   *
   * @param folderId  The ID of the Envelope for which you would like to obtain the binary zip file for.
   * @param docNumber The index of the document starting from 1 whose PDF you want to download.
   * @return Response from the API call
   */
  async downloadSingleDocumentPDF(
    folderId: string,
    docNumber: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {
    const req = this.createRequest('GET', '/folders/document/download');
    const mapped = req.prepareArgs({
      folderId: [folderId, string()],
      docNumber: [docNumber, string()],
    });
    req.query('folderId', mapped.folderId);
    req.query('docNumber', mapped.docNumber);
    return req.callAsStream(requestOptions);
  }

  /**
   * Using Foxit eSign API you can move your Envelope(s) to the recycle bin. Documents in the recycle bin
   * are permanently removed from Foxit eSign systems automatically after 14 days.
   *
   * @param body
   * @return Response from the API call
   */
  async moveEnvelopesToRecycleBin(
    body: EnvelopeIdentifiers[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/movetorecyclebin');
    const mapped = req.prepareArgs({
      body: [body, array(envelopeIdentifiersSchema)],
    });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * You can change the first name, last name, and email if the recipient party has not signed on a
   * shared or a partially signed document using the `Update Envelope Recipients` API. Recipients can be
   * changed only if the Envelope is in `DRAFT` status.
   *
   * @param body
   * @return Response from the API call
   */
  async updateEnvelopeRecipients(
    body: PartyUpdate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/updateFolder');
    const mapped = req.prepareArgs({ body: [body, partyUpdateSchema] });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * You can regenerate the expired folder embedded signing token for accessing the signature from the
   * signer.
   *
   * @param body
   * @return Response from the API call
   */
  async regenerateEmbeddedSigningSession(
    body: SessionGeneration,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest(
      'POST',
      '/embedded/regenerateEmbeddedSigningSession'
    );
    const mapped = req.prepareArgs({ body: [body, sessionGenerationSchema] });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param folderId
   * @return Response from the API call
   */
  async getEnvelopeActivityHistory(
    folderId: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/folders/viewActivityHistory');
    const mapped = req.prepareArgs({ folderId: [folderId, number()] });
    req.query('folderId', mapped.folderId);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * You can poll our API to get the deleted folder history.
   *
   * @param folderId
   * @return Response from the API call
   */
  async getDeletedEnvelopeHistory(
    folderId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/folders/deletedLog');
    const mapped = req.prepareArgs({ folderId: [folderId, string()] });
    req.query('folderId', mapped.folderId);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * Using Foxit eSign API you can remove your Envelope(s) permanently from Foxit eSign systems.
   *
   * @param body
   * @return Response from the API call
   */
  async deleteEnvelopes(
    body: EnvelopeIdentifiers[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/folders/delete');
    const mapped = req.prepareArgs({
      body: [body, array(envelopeIdentifiersSchema)],
    });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }
}
