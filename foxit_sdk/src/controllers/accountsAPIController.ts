/**
 * Foxit eSign testLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AccountCreationObject,
  accountCreationObjectSchema,
} from '../models/accountCreationObject';
import { PlanNamesEnum, planNamesEnumSchema } from '../models/planNamesEnum';
import { string, unknown } from '../schema';
import { BaseController } from './baseController';

export class AccountsAPIController extends BaseController {
  /**
   * This endpoint allows you to create a new account as a partner by using the API.
   *
   * *Note:* instead of providing the `access_token` Authorization header from your partner portal, you
   * will instead provide the `client_id` and `client_secret` as part of the body parameters of this call.
   *
   * @param accountCreationobject
   * @return Response from the API call
   */
  async createNewAccount(
    accountCreationobject: AccountCreationObject,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/accounts/create');
    const mapped = req.prepareArgs({
      accountCreationobject: [
        accountCreationobject,
        accountCreationObjectSchema,
      ],
    });
    req.json(mapped.accountCreationobject);
    req.authenticate(false);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This endpoint allows you to cancel a specific account.
   *
   * `Note:` please provide the `access_token` Authorization header from the account which you are
   * looking to cancel.
   *
   * @return Response from the API call
   */
  async cancelAccount(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/accounts/cancel');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This endpoint allows you to reactivate a specific account.
   *
   * `Note:` please provide the `access_token` Authorization header from the account which you are
   * looking to reactivate.
   *
   * @return Response from the API call
   */
  async reactivateAccount(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/accounts/reactivate');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This endpoint allows you to edit the number of licenses available in a a specific account.
   *
   * `Note:` please provide the `access_token` Authorization header from the account which you are
   * looking to reactivate.
   *
   * @param newNumberOfLicences The new required number of licences for the account
   * @param partnerCode         Enter the unique partner code assigned to the partner to link this account
   *                                      with the specified partner
   * @return Response from the API call
   */
  async changeLicenses(
    newNumberOfLicences: string,
    partnerCode: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/accounts/changenumberoflicences');
    const mapped = req.prepareArgs({
      newNumberOfLicences: [newNumberOfLicences, string()],
      partnerCode: [partnerCode, string()],
    });
    req.query('newNumberOfLicences', mapped.newNumberOfLicences);
    req.query('partnerCode', mapped.partnerCode);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This endpoint allows you to change the plan type for a specific account.
   *
   * **Note:** please provide the `access_token` Authorization header from the account which you are
   * looking to change the plan type for.
   *
   * @param newNumberOfLicenses The new required number of licences for the account in the new plan
   * @param newPlan             Name of plan that you want to subscribe to
   * @return Response from the API call
   */
  async changePlan(
    newNumberOfLicenses: string,
    newPlan: PlanNamesEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/accounts/changeplan');
    const mapped = req.prepareArgs({
      newNumberOfLicenses: [newNumberOfLicenses, string()],
      newPlan: [newPlan, planNamesEnumSchema],
    });
    req.query('newNumberOfLicenses', mapped.newNumberOfLicenses);
    req.query('newPlan', mapped.newPlan);
    return req.callAsJson(unknown(), requestOptions);
  }
}
