/**
 * Foxit eSign testLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  WebhookCreation,
  webhookCreationSchema,
} from '../models/webhookCreation';
import {
  WebhookIdentifiers,
  webhookIdentifiersSchema,
} from '../models/webhookIdentifiers';
import { WebhookUpdate, webhookUpdateSchema } from '../models/webhookUpdate';
import { array, string, unknown } from '../schema';
import { BaseController } from './baseController';

export class WebhooksAPIController extends BaseController {
  /**
   * You can poll our API to get information about a specific Webhook channel.
   *
   * @param channelId
   * @return Response from the API call
   */
  async getWebhookChannelDetails(
    channelId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/webhook/mychannel');
    const mapped = req.prepareArgs({ channelId: [channelId, string()] });
    req.query('channelId', mapped.channelId);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To get a list of all the webhook channels in the account, use the following call.
   *
   * @return Response from the API call
   */
  async listAllWebhookChannels(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/webhook/channellist');
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To create a new channel via API, please make a call to /webhook/updatewebhookchannel with the
   * following parameters.
   *
   * @param body
   * @return Response from the API call
   */
  async updateWebhookChannel(
    body: WebhookUpdate,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/webhook/updatewebhookchannel');
    const mapped = req.prepareArgs({ body: [body, webhookUpdateSchema] });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To create a new channel via API, please make a call to /webhook/updatewebhookchannel with the
   * following parameters.
   *
   * @param channelId Your Channel ID received when creating the webhook. Can also be found in the Foxit
   *                            eSIgn Settings page.
   * @return Response from the API call
   */
  async reactivateWebhookChannel(
    channelId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/webhook/channelreactivate');
    const mapped = req.prepareArgs({ channelId: [channelId, string()] });
    req.query('channelId', mapped.channelId);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This endpoint will deactivate your Webhook Channel.
   *
   * **Note:** To reactivate an channel via API, please make a call to /webhook/channelreactivate
   *
   * @param channelId Your Channel ID received when creating the webhook. Can also be found in the Foxit
   *                            eSIgn Settings page.
   * @return Response from the API call
   */
  async deactivateWebhookChannel(
    channelId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/webhook/channeldeactivate');
    const mapped = req.prepareArgs({ channelId: [channelId, string()] });
    req.query('channelId', mapped.channelId);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * To delete a webhook channel via API, please make a call to this endpoint with the following
   * parameters.
   *
   * @param channelIds Your Channel ID received when creating the webhook. Can also be found
   *                                           in the Foxit eSIgn Settings page.
   * @return Response from the API call
   */
  async deleteWebhookChannel(
    channelIds: WebhookIdentifiers[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/webhook/deletechannels');
    const mapped = req.prepareArgs({
      channelIds: [channelIds, array(webhookIdentifiersSchema)],
    });
    req.json(mapped.channelIds);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createWebhookChannel(
    body: WebhookCreation,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/webhook/createwebhookchannel');
    const mapped = req.prepareArgs({ body: [body, webhookCreationSchema] });
    req.json(mapped.body);
    return req.callAsJson(unknown(), requestOptions);
  }
}
