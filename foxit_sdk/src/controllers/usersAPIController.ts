/**
 * Foxit eSign testLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  UserCreationObject,
  userCreationObjectSchema,
} from '../models/userCreationObject';
import {
  UserUpdateObject,
  userUpdateObjectSchema,
} from '../models/userUpdateObject';
import { string, unknown } from '../schema';
import { BaseController } from './baseController';

export class UsersAPIController extends BaseController {
  /**
   * This endpoint allows you to create a User in any account by using the API.
   *
   * @param userCreationObject object to create users
   * @return Response from the API call
   */
  async createUser(
    userCreationObject: UserCreationObject,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('POST', '/users/create');
    const mapped = req.prepareArgs({
      userCreationObject: [userCreationObject, userCreationObjectSchema],
    });
    req.json(mapped.userCreationObject);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This endpoint allows you to update the User's profile parameters using the API.
   *
   * @param userUpdateObject object to update a user
   * @return Response from the API call
   */
  async updateUser(
    userUpdateObject: UserUpdateObject,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/users/update');
    const mapped = req.prepareArgs({
      userUpdateObject: [userUpdateObject, userUpdateObjectSchema],
    });
    req.json(mapped.userUpdateObject);
    return req.call(requestOptions);
  }

  /**
   * This endpoint allows you to delete a user via API.
   *
   * @param userId Party Id for that user
   * @return Response from the API call
   */
  async deleteUser(
    userId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/users/delete');
    const mapped = req.prepareArgs({ userId: [userId, string()] });
    req.query('userId', mapped.userId);
    return req.callAsJson(unknown(), requestOptions);
  }

  /**
   * This endpoint allows you to list all of the users under a specific account via API.
   *
   * @return Response from the API call
   */
  async listAllUsers(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET', '/users/list');
    return req.callAsJson(unknown(), requestOptions);
  }
}
