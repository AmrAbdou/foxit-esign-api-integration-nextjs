/**
 * Foxit eSign testLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { boolean, number, object, optional, Schema, string } from '../schema';
import { PermissionsEnum, permissionsEnumSchema } from './permissionsEnum';
import {
  SignerAuthLevelsEnum,
  signerAuthLevelsEnumSchema,
} from './signerAuthLevelsEnum';

/** A list of recipient parties you're sending the folder to. Every entry must contain firstName, lastName, emailId, permission and sequence fields. */
export interface Party {
  /** The first name of the recipient */
  firstName: string;
  /** The last name of the recipient */
  lastName: string;
  /** The email name of the recipient */
  emailId: string;
  permission: PermissionsEnum;
  /** Use this field to assign a sequence number to a recipient in the list of recipient parties. Use unique sequence numbers for each party starting with 1 like 1,2,3,4.... If a single person appears multiple times in the signing workflow, please assign a different sequence each time the recipient is repeated. */
  sequence: number;
  /** The level of authentication that a signer will leverage for verification purposes */
  signerAuthLevel?: SignerAuthLevelsEnum;
  /** Use this field to initiate the party is a placeholder. Note: 1. firstName, lastName, emailId parameter's value must be blank of this party. 2. To add the placeholder, one recipient must be requred with 'PARTY_ASSIGNER' permission. */
  isPlaceholder?: boolean;
  /** Use this field to assign a role of placeholder. */
  partyRole?: string;
  /** Value can be either true or false Use this parameter for allowing signer to update first and last name before completing the signing process. */
  allowNameChange?: string;
  /** Use this parameter when creating a party as bulk. **Note:** Please make sure the "Update Name Change"option is enabled from company settings. */
  partyIsEmailGroup?: string;
  workflowSequence?: number;
  /** Email address of In-Person Administrator */
  hostEmailId?: string;
}

export const partySchema: Schema<Party> = object({
  firstName: ['firstName', string()],
  lastName: ['lastName', string()],
  emailId: ['emailId', string()],
  permission: ['permission', permissionsEnumSchema],
  sequence: ['sequence', number()],
  signerAuthLevel: ['signerAuthLevel', optional(signerAuthLevelsEnumSchema)],
  isPlaceholder: ['isPlaceholder', optional(boolean())],
  partyRole: ['partyRole', optional(string())],
  allowNameChange: ['allowNameChange', optional(string())],
  partyIsEmailGroup: ['partyIsEmailGroup', optional(string())],
  workflowSequence: ['workflowSequence', optional(number())],
  hostEmailId: ['hostEmailId', optional(string())],
});
