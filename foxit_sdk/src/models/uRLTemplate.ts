/**
 * Foxit eSign testLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
  unknown,
} from '../schema';
import { TemplateParty, templatePartySchema } from './templateParty';

/** Create a template by uploading a PDF document using URL or Base64. To create a template from a PDF file, either provide publicly accessible URLs to PDF documents or pass PDF documents as multipart form data with the number of recipient parties, etc. */
export interface URLTemplate {
  /** Name of the template */
  templateName: string;
  /** URL to PDF document for template creation. It should be publicly accessible while creating the template. */
  templateUrl: string;
  /** Value can be either url or base64. */
  inputType?: string;
  /** This field is used to determine whether Foxit eSign should parse the documents for Text Tags to convert them into Foxit eSign fields. */
  processTextTags: boolean;
  /** This field is used to determine whether Foxit eSign should parse the documents for AcroFields to convert them into Foxit eSign fields. */
  processAcroFields: boolean;
  /** Share this template with all users in your account. */
  shareAll: boolean;
  /** Add number of parties in the template. The values of this parameter should be less than 20. */
  numberOfParties: number;
  /** Enter a css value for a color to change the theme of createEmbeddedTemplateSession . */
  themeColor?: string;
  /** Enter email of another user in an account which will be used as the author for this template. */
  authorEmail?: string;
  /** If set as true, an embedded template session to directly open the Foxit eSign template preparing view. Dragging and dropping various fields on the template will be available. */
  createEmbeddedTemplateSession?: boolean;
  /** If createEmbeddedTemplateSession is true, the absolute URL can be entered for the landing page on any website/application, which the user will be redirected to after clicking "save and close" in the embedded template view. */
  redirectURL?: string;
  /** If true, it will hide the Send button in an embedded template view. */
  hideSendTemplate?: boolean;
  /** If true, then in the embedded template view cannot change the parties for the envelope which are already added. */
  fixRecipientParties?: boolean;
  /** A list of different fields to be added to the template. */
  fields?: unknown[];
  /** A list of parties to be adding in the template. Every entry must contain sequence field. */
  parties: TemplateParty[];
  /** If true, it will hide "More Actions" button in template session. */
  hideMoreAction?: boolean;
  /** If true, it will hide "Share with All" option in template session. */
  hideShareWithAll?: boolean;
  /** If true, it will hide all add party's options in an embedded template session. */
  hideAddParty?: boolean;
  /** If true, it will hide the "Me" button on Recipient Parties in an embedded template session. */
  hideMeButton?: boolean;
  /** If true, it will hide the "Others" button on Recipient Parties in an embedded template session. */
  hideOthersButton?: boolean;
  /** If true, it will hide the "Find and Add Existing Contact" input box on Recipient Parties in an embedded template session. */
  hideExistingContactSelectOption?: boolean;
  /** Hide field names for Recipients for Data Entry Fields and Advanced Fields.(Except Radio button, Checkbox, Image and Hyperlink). */
  hideFieldNameForRecipients?: boolean;
  /** Borders of Checkbox will be hidden in the executed documents. */
  hideCheckboxBorder?: boolean;
}

export const uRLTemplateSchema: Schema<URLTemplate> = object({
  templateName: ['templateName', string()],
  templateUrl: ['templateUrl', string()],
  inputType: ['inputType', optional(string())],
  processTextTags: ['processTextTags', boolean()],
  processAcroFields: ['processAcroFields', boolean()],
  shareAll: ['shareAll', boolean()],
  numberOfParties: ['numberOfParties', number()],
  themeColor: ['themeColor', optional(string())],
  authorEmail: ['authorEmail', optional(string())],
  createEmbeddedTemplateSession: [
    'createEmbeddedTemplateSession',
    optional(boolean()),
  ],
  redirectURL: ['redirectURL', optional(string())],
  hideSendTemplate: ['hideSendTemplate', optional(boolean())],
  fixRecipientParties: ['fixRecipientParties', optional(boolean())],
  fields: ['fields', optional(array(unknown()))],
  parties: ['parties', array(lazy(() => templatePartySchema))],
  hideMoreAction: ['hideMoreAction', optional(boolean())],
  hideShareWithAll: ['hideShareWithAll', optional(boolean())],
  hideAddParty: ['hideAddParty', optional(boolean())],
  hideMeButton: ['hideMeButton', optional(boolean())],
  hideOthersButton: ['hideOthersButton', optional(boolean())],
  hideExistingContactSelectOption: [
    'hideExistingContactSelectOption',
    optional(boolean()),
  ],
  hideFieldNameForRecipients: [
    'hideFieldNameForRecipients',
    optional(boolean()),
  ],
  hideCheckboxBorder: ['hideCheckboxBorder', optional(boolean())],
});
